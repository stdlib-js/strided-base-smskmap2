{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/index.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to single-precision floating-point strided input arrays according to a strided mask array and assigns results to a single-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - starting `mask` index\n* @param {Float32Array} z - destination array\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} fcn - binary function to apply\n* @returns {Float32Array} `z`\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var addf = require( '@stdlib/math-base-ops-addf' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var z = new Float32Array( x.length );\n*\n* smskmap2( x.length, x, 1, 0, y, 1, 0, m, 1, 0, z, 1, 0, addf );\n*\n* console.log( z );\n* // => <Float32Array>[ 2.0, 4.0, 0.0, 8.0, 10.0 ]\n*/\nfunction smskmap2( N, x, strideX, offsetX, y, strideY, offsetY, mask, strideMask, offsetMask, z, strideZ, offsetZ, fcn ) { // eslint-disable-line max-len, max-params\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar im;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tiz = offsetZ;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\t}\n\t\tix += strideX;\n\t\tiy += strideY;\n\t\tiz += strideZ;\n\t\tim += strideMask;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smskmap2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a binary function to single-precision floating-point strided input arrays according to a strided mask array and assign results to a single-precision floating-point strided output array.\n*\n* @module @stdlib/strided-base-smskmap2\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var addf = require( '@stdlib/math-base-ops-addf' );\n* var smskmap2 = require( '@stdlib/strided-base-smskmap2' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var z = new Float32Array( x.length );\n*\n* smskmap2( x.length, x, 1, y, 1, m, 1, z, 1, addf );\n*\n* console.log( z );\n* // => <Float32Array>[ 2.0, 4.0, 0.0, 8.0, 10.0 ]\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var addf = require( '@stdlib/math-base-ops-addf' );\n* var smskmap2 = require( '@stdlib/strided-base-smskmap2' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var z = new Float32Array( x.length );\n*\n* smskmap2.ndarray( x.length, x, 1, 0, y, 1, 0, m, 1, 0, z, 1, 0, addf );\n*\n* console.log( z );\n* // => <Float32Array>[ 2.0, 4.0, 0.0, 8.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to single-precision floating-point strided input arrays and assigns results to a single-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - input array\n* @param {integer} strideY - `y` stride length\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {Float32Array} z - destination array\n* @param {integer} strideZ - `z` stride length\n* @param {Function} fcn - binary function to apply\n* @returns {Float32Array} `z`\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var addf = require( '@stdlib/math-base-ops-addf' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var z = new Float32Array( x.length );\n*\n* smskmap2( x.length, x, 1, y, 1, m, 1, z, 1, addf );\n*\n* console.log( z );\n* // => <Float32Array>[ 2.0, 4.0, 0.0, 8.0, 10.0 ]\n*/\nfunction smskmap2( N, x, strideX, y, strideY, mask, strideMask, z, strideZ, fcn ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar im;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tif ( strideZ < 0 ) {\n\t\tiz = (1-N) * strideZ;\n\t} else {\n\t\tiz = 0;\n\t}\n\tif ( strideMask < 0 ) {\n\t\tim = (1-N) * strideMask;\n\t} else {\n\t\tim = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\t}\n\t\tix += strideX;\n\t\tiy += strideY;\n\t\tiz += strideZ;\n\t\tim += strideMask;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smskmap2;\n"],"names":["main","N","x","strideX","y","strideY","mask","strideMask","z","strideZ","fcn","ix","iy","iz","im","i","ndarray","offsetX","offsetY","offsetMask","offsetZ","require$$0","lib"],"mappings":";;iHAoFA,ICvBAA,ECTA,SAAmBC,EAAGC,EAAGC,EAASC,EAAGC,EAASC,EAAMC,EAAYC,EAAGC,EAASC,GAC3E,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAKd,GAAK,EACT,OAAOO,EAsBR,IAnBCG,EADIR,EAAU,GACR,EAAEF,GAAKE,EAER,EAGLS,EADIP,EAAU,GACR,EAAEJ,GAAKI,EAER,EAGLQ,EADIJ,EAAU,GACR,EAAER,GAAKQ,EAER,EAGLK,EADIP,EAAa,GACX,EAAEN,GAAKM,EAER,EAEAQ,EAAI,EAAGA,EAAId,EAAGc,IACC,IAAfT,EAAMQ,KACVN,EAAGK,GAAOH,EAAKR,EAAGS,GAAMP,EAAGQ,KAE5BD,GAAMR,EACNS,GAAMP,EACNQ,GAAMJ,EACNK,GAAMP,EAEP,OAAOC,GD5BRQ,EDNA,SAAmBf,EAAGC,EAAGC,EAASc,EAASb,EAAGC,EAASa,EAASZ,EAAMC,EAAYY,EAAYX,EAAGC,EAASW,EAASV,GAClH,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAKd,GAAK,EACT,OAAOO,EAMR,IAJAG,EAAKM,EACLL,EAAKM,EACLL,EAAKO,EACLN,EAAKK,EACCJ,EAAI,EAAGA,EAAId,EAAGc,IACC,IAAfT,EAAMQ,KACVN,EAAGK,GAAOH,EAAKR,EAAGS,GAAMP,EAAGQ,KAE5BD,GAAMR,EACNS,GAAMP,EACNQ,GAAMJ,EACNK,GAAMP,EAEP,OAAOC,GClBRa,EAOArB,EAAA,UAAAgB,GAKA,IAAAM,EAAAtB"}